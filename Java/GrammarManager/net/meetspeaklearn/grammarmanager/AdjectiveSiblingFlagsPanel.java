/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.meetspeaklearn.grammarmanager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

/**
 *
 * @author steve
 */
public class AdjectiveSiblingFlagsPanel extends javax.swing.JFrame {
    private Adjective adjective;
    private ArrayList<AdjectiveFlagPanel> flagPanels;

    /**
     * Creates new form AdjectiveSiblingFlagsPanel
     */
    public AdjectiveSiblingFlagsPanel() {
        initComponents();
    }
    
    public AdjectiveSiblingFlagsPanel(Adjective adj) {
        this();
        
        adjective = adj;
        
        AdjectivalCategory cat = adj.getCategory();
        
        if (cat == null) return;
        
        HashSet<Adjective> adjs = cat.getAdjectives();
        
        if (adjs == null) return;
        
        titleLabel.setText("Antonyms/Synonyms of " + cat.getName() + " \"" + adj.getText() + "\"");
        
        flagPanels = new ArrayList<AdjectiveFlagPanel>();
        ArrayList<Adjective> sortedAdjs = new ArrayList<Adjective>();
        sortedAdjs.addAll(adjs);
        Collections.sort(sortedAdjs, Adjective.getComparator());
        
        for (Adjective a : sortedAdjs) {
            if (a != adj) {
                AdjectiveFlagPanel flagPanel = new AdjectiveFlagPanel(adj, a);
                flagPanels.add(flagPanel);
                flagsPanel.add(flagPanel);
            }
        }
    }
    
    public Adjective getAdjective() {
        return adjective;
    }
    
    public ArrayList<Adjective> getSelectedAdjectives() {
        ArrayList<Adjective> selectedAdjectives = new ArrayList<Adjective>();
        
        if (flagPanels == null) return selectedAdjectives;
        
        for (AdjectiveFlagPanel panel : flagPanels) {
            if (panel.isSelected()) selectedAdjectives.add(panel.getAdjective());
        }
        
        return selectedAdjectives;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JPanel();
        changeCategoryOfSelectedAdjectivesButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        flagsPanel = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(1000, 800));
        setPreferredSize(new java.awt.Dimension(1000, 800));

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Antonyms / Synonyms");
        titleLabel.setPreferredSize(new java.awt.Dimension(200, 22));
        topPanel.add(titleLabel);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        changeCategoryOfSelectedAdjectivesButton.setText("Change category of selected adjectives");
        changeCategoryOfSelectedAdjectivesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeCategoryOfSelectedAdjectivesButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(changeCategoryOfSelectedAdjectivesButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(closeButton);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        flagsPanel.setLayout(new java.awt.GridLayout(100, 4, 10, 10));
        scrollPane.setViewportView(flagsPanel);

        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void changeCategoryOfSelectedAdjectivesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeCategoryOfSelectedAdjectivesButtonActionPerformed
        ArrayList<Adjective> selectedAdjectives = getSelectedAdjectives();
        ChangeCategoryOfAdjectivesFrame popup = new ChangeCategoryOfAdjectivesFrame(adjective, selectedAdjectives);
        popup.setLocationRelativeTo(this);
        popup.setVisible(true);
    }//GEN-LAST:event_changeCategoryOfSelectedAdjectivesButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton changeCategoryOfSelectedAdjectivesButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel flagsPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
